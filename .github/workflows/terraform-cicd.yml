# .github/workflows/terraform-cicd.yml
name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'eu-west-2'

jobs:
  terraform-validate:
    name: 'Terraform Validate & Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Run Security Scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: true

    - name: Terraform Plan
      run: terraform plan -no-color
      env:
        TF_VAR_secret_key: ${{ secrets.OUTLINE_SECRET_KEY }}
        TF_VAR_utils_secret: ${{ secrets.OUTLINE_UTILS_SECRET }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: terraform
    environment: production
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        TF_VAR_secret_key: ${{ secrets.OUTLINE_SECRET_KEY }}
        TF_VAR_utils_secret: ${{ secrets.OUTLINE_UTILS_SECRET }}

    - name: Get Infrastructure Outputs
      run: |
        echo "## Infrastructure Deployed Successfully! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "### Application URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Production**: $(terraform output -raw application_url)" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Balancer**: $(terraform output -raw alb_dns_name)" >> $GITHUB_STEP_SUMMARY
        echo "### Infrastructure Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **VPC**: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: $(terraform output -raw rds_endpoint)" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache**: $(terraform output -raw redis_endpoint)" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy (Manual)'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: terraform
    environment: production
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      env:
        TF_VAR_secret_key: ${{ secrets.OUTLINE_SECRET_KEY }}
        TF_VAR_utils_secret: ${{ secrets.OUTLINE_UTILS_SECRET }}